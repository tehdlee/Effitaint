Points-to sets of all variables
[]:<LambdaStaticMethod$GT: void <init>()>/%this -> [[]:NewObj{<LambdaStaticMethod: LambdaStaticMethod$Op lambda$test$0(java.lang.Object)>[3@L12] new LambdaStaticMethod$GT}]
[]:<LambdaStaticMethod$LE: void <init>()>/%this -> [[]:NewObj{<LambdaStaticMethod: LambdaStaticMethod$Op lambda$test$0(java.lang.Object)>[6@L14] new LambdaStaticMethod$LE}]
[]:<LambdaStaticMethod$Op: void <init>()>/%this -> [[]:NewObj{<LambdaStaticMethod: LambdaStaticMethod$Op lambda$test$0(java.lang.Object)>[3@L12] new LambdaStaticMethod$GT}, []:NewObj{<LambdaStaticMethod: LambdaStaticMethod$Op lambda$test$0(java.lang.Object)>[6@L14] new LambdaStaticMethod$LE}]
[]:<LambdaStaticMethod: LambdaStaticMethod$Op lambda$test$0(java.lang.Object)>/$r1 -> [[]:NewObj{<LambdaStaticMethod: LambdaStaticMethod$Op lambda$test$0(java.lang.Object)>[6@L14] new LambdaStaticMethod$LE}]
[]:<LambdaStaticMethod: LambdaStaticMethod$Op lambda$test$0(java.lang.Object)>/$r2 -> [[]:NewObj{<LambdaStaticMethod: LambdaStaticMethod$Op lambda$test$0(java.lang.Object)>[3@L12] new LambdaStaticMethod$GT}]
[]:<LambdaStaticMethod: LambdaStaticMethod$Op lambda$test$0(java.lang.Object)>/r0 -> [[]:NewObj{<LambdaStaticMethod: java.lang.Object test()>[1@L17] new java.lang.Object}]
[]:<LambdaStaticMethod: java.lang.Object test()>/$r0 -> [[]:LambdaObj{alloc=<LambdaStaticMethod: java.lang.Object test()>[0@L10] $r0 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.Function ()>[MethodType: java.lang.Object (java.lang.Object),MethodHandle[REF_invokeStatic]: <LambdaStaticMethod: LambdaStaticMethod$Op lambda$test$0(java.lang.Object)>,MethodType: LambdaStaticMethod$Op (java.lang.Object)](),type=java.util.function.Function in <LambdaStaticMethod: java.lang.Object test()>}]
[]:<LambdaStaticMethod: java.lang.Object test()>/$r1 -> [[]:NewObj{<LambdaStaticMethod: java.lang.Object test()>[1@L17] new java.lang.Object}]
[]:<LambdaStaticMethod: java.lang.Object test()>/$r2 -> [[]:NewObj{<LambdaStaticMethod: LambdaStaticMethod$Op lambda$test$0(java.lang.Object)>[3@L12] new LambdaStaticMethod$GT}, []:NewObj{<LambdaStaticMethod: LambdaStaticMethod$Op lambda$test$0(java.lang.Object)>[6@L14] new LambdaStaticMethod$LE}]
[]:<LambdaStaticMethod: void main(java.lang.String[])>/r0 -> [[]:EntryPointObj{alloc=MethodParam{<LambdaStaticMethod: void main(java.lang.String[])>/0},type=java.lang.String[] in <LambdaStaticMethod: void main(java.lang.String[])>}]

Points-to sets of all static fields

Points-to sets of all instance fields

Points-to sets of all array indexes
[]:EntryPointObj{alloc=MethodParam{<LambdaStaticMethod: void main(java.lang.String[])>/0},type=java.lang.String[] in <LambdaStaticMethod: void main(java.lang.String[])>}[*] -> [[]:EntryPointObj{alloc=MethodParam{<LambdaStaticMethod: void main(java.lang.String[])>/0}[*],type=java.lang.String in <LambdaStaticMethod: void main(java.lang.String[])>}]

